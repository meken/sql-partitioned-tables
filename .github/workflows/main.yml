name: CICD

on:
  push:
    paths-ignore:
    - '**.md'

env:
  RESOURCE_GROUP: 'rg-partition-table-demo'
  BASE_NAME: 'par'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      sql_server: ${{ steps.resource_setup.outputs.sql_server }}
      hot_conn_str: ${{ steps.resource_setup.outputs.hot_conn_str }}
      warm_conn_str: ${{ steps.resource_setup.outputs.warm_conn_str }}
      hot_db: ${{ steps.resource_setup.outputs.hot_db }}
      warm_db: ${{ steps.resource_setup.outputs.warm_db }}
      factory_name: ${{ steps.resource_setup.outputs.factory_name }}
      factory_app_id: ${{ steps.resource_setup.outputs.factory_app_id }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Set up Hot & Warm databases and Data Factory
      uses: azure/CLI@v1
      id: resource_setup
      with:
        azcliversion: latest
        inlineScript: |
          SQL_AD_ADMIN_GROUP_OBJECT_ID=`az ad group list \
              --filter "displayName eq '${{ secrets.SQL_AD_ADMIN_GROUP_LOGIN }}'" \
              --query [].objectId --output tsv`
          TENANT_ID=`az account show --query tenantId -o tsv`
          OUT=`az deployment group create -g "${{ env.RESOURCE_GROUP }}" \
              --template-file infra/databases-and-data-factory.json \
              --parameters baseName="${{ env.BASE_NAME }}" \
                sqlServerAdminLogin="${{ secrets.SQL_ADMIN_USER_LOGIN }}" \
                sqlServerAdminPassword="${{ secrets.SQL_ADMIN_USER_PASSWORD }}" \
                sqlServerADAdminLogin="${{ secrets.SQL_AD_ADMIN_GROUP_LOGIN }}" \
                sqlServerADAdminObjectId="$SQL_AD_ADMIN_GROUP_OBJECT_ID" \
                sqlServerADAdminTenantId="$TENANT_ID" \
              --query properties.outputs`
          FACTORY_NAME=`echo "$OUT" | jq -r .factoryName.value`
          FACTORY_PRINCIPAL_ID=`echo "$OUT" | jq -r .factoryPrincipalId.value`
          FACTORY_APP_ID=`az ad sp show --id "$FACTORY_PRINCIPAL_ID" --query appId -o tsv`
          SQL_SERVER=`echo "$OUT" | jq -r .sqlServerFqdn.value`
          HOT_CONN=`echo "$OUT" | jq -r .sqlServerHotStoreConnection.value`
          WARM_CONN=`echo "$OUT" | jq -r .sqlServerWarmStoreConnection.value`
          HOT_DB=`echo "$OUT" | jq -r .sqlServerHotStoreDatabase.value`
          WARM_DB=`echo "$OUT" | jq -r .sqlServerWarmStoreDatabase.value`
          echo "::set-output name=factory_name::$FACTORY_NAME"
          echo "::set-output name=factory_app_id::$FACTORY_APP_ID"
          echo "::set-output name=sql_server::$SQL_SERVER"
          echo "::set-output name=hot_conn_str::$HOT_CONN"
          echo "::set-output name=hot_db::$HOT_DB"
          echo "::set-output name=warm_conn_str::$WARM_CONN"
          echo "::set-output name=warm_db::$WARM_DB"
  database_setup:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Turn off the firewall for the build agent
      run: |
        IP=`curl -s https://ifconfig.me`
        SERVER=`echo ${{ needs.prepare.outputs.sql_server }} | cut -d"." -f1`
        az sql server firewall-rule create -g "${{ env.RESOURCE_GROUP }}" \
          -s "$SERVER" \
          -n github-build-agent \
          --start-ip-address "$IP" \
          --end-ip-address "$IP"
    - name: Create tables in *hot* store
      run: |
        FILES=(
          "initial-setup-hot.sql"
          "usp-switch-partition-hot.sql"
          "usp-prepare-for-next-day-hot.sql"
        )
        for FILE in ${FILES[*]}
        do
          sqlcmd -S "${{ needs.prepare.outputs.sql_server }}" \
                -d "${{ needs.prepare.outputs.hot_db }}" \
                -U "${{ secrets.SQL_ADMIN_USER_LOGIN }}" \
                -P "${{ secrets.SQL_ADMIN_USER_PASSWORD }}" \
                -N -l 30 -i "sql/$FILE"
        done
    - name: Create tables in *warm* store
      run: |
        sqlcmd -S "${{ needs.prepare.outputs.sql_server }}" \
              -d "${{ needs.prepare.outputs.warm_db }}" \
              -U "${{ secrets.SQL_ADMIN_USER_LOGIN }}" \
              -P "${{ secrets.SQL_ADMIN_USER_PASSWORD }}" \
              -N -l 30 -i "sql/initial-setup-warm.sql"
    - name: Retrieve the Security Identifier for Data Factory managed identity
      id: sid
      run: |
        SID_QUERY="SET NOCOUNT ON; SELECT CAST(CAST('${{ needs.prepare.outputs.factory_app_id }}' AS UNIQUEIDENTIFIER) AS VARBINARY(16))"
        SID=`sqlcmd -S "${{ needs.prepare.outputs.sql_server }}" \
              -U "${{ secrets.SQL_ADMIN_USER_LOGIN }}" \
              -P "${{ secrets.SQL_ADMIN_USER_PASSWORD }}" \
              -d master -h -1 -N -l 30 -Q "$SID_QUERY"`
        echo "::set-output name=value::$SID"
    - name: Retrieve access token to log into databases
      uses: azure/CLI@v1
      id: access_token
      with:
        azcliversion: latest
        inlineScript: |
          ACCESS_TOKEN=`az account get-access-token --resource https://database.windows.net --query accessToken -o tsv`
          echo "::set-output name=value::$ACCESS_TOKEN"
    - name: Create user and grant permissions on *hot* database
      shell: pwsh
      run: |
        Grant-Permissions -ConnectionString "${{ needs.prepare.outputs.hot_conn_str }}" `
          -FilePath "sql/data-factory-permissions-hot.sql" `
          -AccessToken "${{ steps.access_token.outputs.value }}" `
          -DataFactoryName "${{ needs.prepare.outputs.factory_name }}" `
          -Sid "${{ steps.sid.outputs.value }}"
    - name: Create user and grant permissions on *warm* database
      shell: pwsh
      run: |
        Grant-Permissions -ConnectionString "${{ needs.prepare.outputs.warm_conn_str }}" `
          -FilePath "sql/data-factory-permissions-warm.sql" `
          -AccessToken "${{ steps.access_token.outputs.value }}" `
          -DataFactoryName "${{ needs.prepare.outputs.factory_name }}" `
          -Sid "${{ steps.sid.outputs.value }}"
    - name: Fill *hot* database with random data
      run: |
        sqlcmd -S "${{ needs.prepare.outputs.sql_server }}" \
            -d "${{ needs.prepare.outputs.hot_db }}" \
            -U "${{ secrets.SQL_ADMIN_USER_LOGIN }}" \
            -P "${{ secrets.SQL_ADMIN_USER_PASSWORD }}" \
            -N -l 30 -i
    - name: Remove the firewall rule
      if: ${{ always() }}
      run: |
        SERVER=`echo ${{ needs.prepare.outputs.sql_server }} | cut -d"." -f1`
        az sql server firewall-rule delete -g "${{ env.RESOURCE_GROUP }}" \
          -s "$SERVER" \
          -n github-build-agent
    - name: Set up Data Factory resources (datasets/pipelines/triggers)
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az deployment group create -g ${{ env.RESOURCE_GROUP }} \
            --template-file infra/data-factory-resources.json \
            --parameters factoryName="${{ needs.prepare.outputs.factory_name }}" \
              hotStoreConnection="${{ needs.prepare.outputs.hot_conn_str }}" \
              warmStoreConnection="${{ needs.prepare.outputs.warm_conn_str }}"

